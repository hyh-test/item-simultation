// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id              Int        @id @default(autoincrement()) @map("user_id") // 사용자 고유 ID
  username        String     @unique @map("user_name") // 사용자명
  email           String     @unique @map("user_email") // 이메일
  password        String     @map("user_password") // 암호화된 비밀번호
  createdAt       DateTime   @default(now()) @map("created_at") // 계정 생성 시간
  status          String     @map("account_status") // 계정 상태

  characters      Character[] // 여러 캐릭터를 보유할 수 있음
  @@map(Users)
}

model Character {
  id          Int        @id @default(autoincrement()) @map("character_id") // 캐릭터 고유 ID
  userId      Int        @map("user_id") // Users 모델과의 관계
  name        String     @map("character_name") // 캐릭터 이름
  money       Int        @default(0) @map("character_money") // 캐릭터의 보유 돈
  createdAt   DateTime   @default(now()) @map("character_created_at") // 캐릭터 생성 시간
  status      String     @map("character_status") // 캐릭터 상태

  user        Users      @relation(fields: [userId], references: [id])
  inventory   Inventory[] @map("character_inventory") // 캐릭터의 인벤토리
  equippedItems EquippedItem[] @map("character_equipped_items") // 캐릭터가 장착한 아이템들
  @@map("Character")
}

model Item {
  id              Int        @id @default(autoincrement()) @map("item_id") // 아이템 고유 ID
  name            String     @map("item_name") // 아이템 이름
  description     String     @map("item_description") // 아이템 설명
  type            String     @map("item_type") // 아이템 종류 (무기, 방어구, 소비 아이템 등)
  rarity          String     @map("item_rarity") // 아이템 희귀도
  stats           Json       @map("item_stats") // 아이템 능력치
  price           Int        @map("item_price") // 아이템 가격
  createdAt       DateTime   @default(now()) @map("item_created_at") // 아이템 생성 시간
  updatedAt       DateTime   @updatedAt @map("item_updated_at") // 아이템 수정 시간

  inventories     Inventory[] @map("item_inventory") // 아이템이 인벤토리에 있을 때 연결
  equippedItems   EquippedItem[] @map("item_equipped_items") // 아이템이 장착될 때 연결
  @@map("Item")
}

model Inventory {
  id          Int        @id @default(autoincrement()) @map("inventory_id") // 인벤토리 아이템 고유 ID
  characterId Int        @map("character_id") // 캐릭터와의 관계
  itemId      Int        @map("item_id") // 아이템과의 관계
  quantity    Int        @default(1) @map("item_quantity") // 아이템 수량
  equipped    Boolean    @default(false) @map("is_equipped") // 장착 여부
  addedAt     DateTime   @default(now()) @map("item_added_at") // 인벤토리에 추가된 시간

  character   Character  @relation(fields: [characterId], references: [id])
  item        Item       @relation(fields: [itemId], references: [id])
  @@map("Inventory)
}

model EquippedItem {
  id          Int        @id @default(autoincrement()) @map("equipped_item_id") // 장착된 아이템 고유 ID
  characterId Int        @map("character_id") // 캐릭터와의 관계
  itemId      Int        @map("item_id") // 아이템과의 관계
  slot        String     @map("item_slot") // 장착 위치 (예: 머리, 몸통, 다리 등)
  equippedAt  DateTime   @default(now()) @map("equipped_at") // 아이템 장착 시간

  character   Character  @relation(fields: [characterId], references: [id])
  item        Item       @relation(fields: [itemId], references: [id])
  @@map("EquippedItem")
}
